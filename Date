//Date.cpp
void Date::displayInfo()
{
	cout << _year << "-" << _month << "-" << _day << endl;
}

// 获取某年某月的天数
int Date::GetMonthDay(int year, int month)
{
	int date[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};
	if (month == 2)
	{
		//判断如果是闰年返回29，平年返回28
		if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
			return 29;
		else
			return date[2];
	}
	return date[month];
}

//全省参数的构造函数，声明时定义了，定义时就不需要定义
Date::Date(int year, int month, int day)
{
	_year = year;
	_month = month;
	_day = day;

	//判断日期是否合法
	if (!(_year > 0 &&
		_month > 0 && _month <= 12 &&
		day <= this->GetMonthDay(_year, _month) && day > 0))
		cout << "日期非法" << endl;
}

// 拷贝构造函数
// d2(d1)
Date::Date(const Date& d)
{
	_year = d._year;
	_month = d._month;
	_day = d._day;
}

// 赋值运算符重载
// d2 = d3 -> d2.operator=(&d2, d3)
Date& Date::operator=(const Date& d)
{
	_year = d._year;
	_month = d._month;
	_day = d._day;

	return *this;
}

// 日期+=天数
Date& Date::operator+=(int day)
{
	if (day < 0)
	{
		//+=负数等于-=负数的绝对值
		return *this -= day;
	}

	_day += day;
	//将日期调整合法
	while(_day > this->GetMonthDay(_year, _month))
	{
		_day -= this->GetMonthDay(_year,_month);
		_month++;
		if (_month > 12)
		{
			_month = _month % 12;
			_year++;
		}
	}

	return *this;
}

// 日期+天数
Date Date::operator+(int day)
{
	//重新实例化一个和this相同的对象，对该对象进行+=操作
	Date ret(*this);

	ret += day;
	return ret;
}

// 日期-天数
Date Date::operator-(int day)
{
	Date ret(*this);

	ret -= day;
	return ret;
}

// 日期-=天数
Date& Date::operator-=(int day)
{
	if (day < 0)
	{
		return *this += (-day);
	}

	_day -= day;
	while (_day <= 0)
	{
		_month--;
		if (_month == 0)
		{
			_month = 12;
			_year--;
		}
		_day += this->GetMonthDay(_year,_month);
	}

	return *this;
}

// 前置++
Date& Date::operator++()
{
	//返回++后
	this->operator+=(1);

	return *this;
}

// 后置++
Date Date::operator++(int)
{
	Date ret(*this);

	this->operator++();
	return ret;
}

// 后置--
Date Date::operator--(int)
{
	Date ret(*this);

	this->operator-=(1);
	return ret;
}

// 前置--
Date& Date::operator--()
{
	this->operator-=(1);
	return *this;
}

// >运算符重载
bool Date::operator>(const Date& d)
{
	if (_year > d._year ||
		(_year == d._year && _month > d._month)||
		(_year == d._year && _month == d._month && _day > d._day))
		return true;
	return false;
}

// ==运算符重载
bool Date::operator==(const Date& d)
{
	if (_year == d._year && _month == d._month && _day == d._day)
		return true;
	return false;
}

// >=运算符重载
inline bool Date::operator >= (const Date& d)
{
	return this->operator==(d) || this->operator>(d);
}

// <运算符重载
bool Date::operator < (const Date& d)
{
	return !(this->operator>=(d));
}

// <=运算符重载
bool Date::operator <= (const Date& d)
{
	return this->operator<(d) || this->operator==(d);
}

// !=运算符重载
bool Date::operator != (const Date& d)
{
	return !(this->operator==(d));
}

// 日期-日期 返回天数
int Date::operator-(const Date& d)
{
	Date max = *this, min = d;
	int flag = 1;
	if (*this < d)
	{
		max = d;
		min = *this;
		flag = -1;
	}

	int n = 0;
	while (min != max)
	{
		++n;
		++min;
	}

	return n*flag;
}

//Date.h
class Date
{
public:

	//打印日期
	void displayInfo();

	// 获取某年某月的天数
	int GetMonthDay(int year, int month);

	// 全缺省的构造函数
	Date(int year = 1900, int month = 1, int day = 1);

	// 拷贝构造函数
	// d2(d1)
	Date(const Date& d);

	// 赋值运算符重载
	// d2 = d3 -> d2.operator=(&d2, d3)
	Date& operator=(const Date& d);

	// 日期+=天数
	Date& operator+=(int day);

	// 日期+天数
	Date operator+(int day);

	// 日期-天数
	Date operator-(int day);

	// 日期-=天数
	Date& operator-=(int day);

	// 前置++
	Date& operator++();

	// 后置++
	Date operator++(int);

	// 后置--
	Date operator--(int);

	// 前置--
	Date& operator--();

	// >运算符重载
	bool operator>(const Date& d);

	// ==运算符重载
	bool operator==(const Date& d);

	// >=运算符重载
	inline bool operator >= (const Date& d);

	// <运算符重载
	bool operator < (const Date& d);

	// <=运算符重载
	bool operator <= (const Date& d);

	// !=运算符重载
	bool operator != (const Date& d);

	// 日期-日期 返回天数
	int operator-(const Date& d);

private:
	int _year;
	int _month;
	int _day;
};
