void Menu::Display()
{
	//初始化绘图窗口
	initgraph(416, 624, SHOWCONSOLE);

	/*设置背景图*/
	IMAGE img;
	//缩放因子，例如设置宽度为100的单元格，实际的绘制宽度为（100*缩放因子）
	setaspectratio(1.1, 1);
	//从图片文件获取图像（图像的image指针，图像名，资源名称，图片的拉伸宽度、高度，是否自适应图片大小）
	loadimage(&img, "begin.jpg", 377, 624, 1);
	putimage(0, 0, &img);

	/*控制鼠标移动操作*/
	MOUSEMSG m;//鼠标操作
	while (true)
	{
		m = GetMouseMsg();//获取鼠标消息
		//左键按下：WM_LBUTTONDOWN
		if (m.uMsg == WM_LBUTTONDOWN && (m.x >= 72 && m.x <= 307 && m.y >= 340 && m.y <= 400
			|| m.x >= 72 && m.x <= 307 && m.y >= 420 && m.y <= 480))
		{
			//uMsg鼠标信息  WM_MOUSEMOVE鼠标移动消息  x y表示鼠标位置坐标
			//当鼠标在"人机对战、双人对战"上时，显示红色边框
			if (m.x >= 72 && m.x <= 307 && m.y >= 340 && m.y <= 400)
			{
				setlinecolor(YELLOW);
				setlinestyle(PS_SOLID | PS_JOIN_ROUND, 2);
				//空心矩形框
				rectangle(72, 340, 300, 400);
			}
			else if (m.x >= 72 && m.x <= 307 && m.y >= 420 && m.y <= 480)
			{
				setlinecolor(YELLOW);
				//空心矩形框
				rectangle(72, 420, 300, 480);
			}
			Sleep(500);
			//清除屏幕内容
			cleardevice();
			//休眠五秒
			Sleep(300);
			//关闭窗口
			closegraph();
			//使用匿名对象打开棋盘界面
			Menu().ChessBoard(m);
			break;
		}
	}
}

void Menu::ChessBoard(MOUSEMSG m)
{
	//初始化绘图窗口
	initgraph(665,490, SHOWCONSOLE);

	/*设置棋盘背景背景图*/
	IMAGE img;
	//缩放因子，例如设置宽度为100的单元格，实际的绘制宽度为（100*缩放因子）
	//setaspectratio(1.1, 1);
	//从图片文件获取图像（图像的image指针，图像名，资源名称，图片的拉伸宽度、高度，是否自适应图片大小）
	loadimage(&img, "chessBoard.jpg", 665,490);
	putimage(0, 0, &img);

	//绘制棋盘
	while (true)
	{
		for (int i = 20; i <= 470; i+=30)
		{
			setlinecolor(WHITE);
			line(20,i,470,i);
			line(i,20,i,470);
		}
		//如果左键双人，跳入双人游戏
		if (m.uMsg == WM_LBUTTONDOWN && m.x >= 72 && m.x <= 307 && m.y >= 420 && m.y <= 480)
		{
			Play().TwoPlayerGame(m);
		}
		else
		{
			Play().ComputerUserGame(m);
		}
	}
}

void Play::buttonRingth(MOUSEMSG m,MOUSEMSG ms, int win)
{
	if (ms.x >= 500 && ms.x <= 655 && ms.y >= 30 && ms.y <= 80)
	{
		memset(a, 0, sizeof(a));
		//重新开始
		setlinecolor(RED);
		//空心矩形框
		rectangle(500, 30, 655, 80);
		Sleep(300);
		Menu().ChessBoard(m);
	}
	else if (ms.x >= 500 && ms.x <= 655 && ms.y >= 115 && ms.y <= 165)
	{
		memset(a, 0, sizeof(a));
		//返回菜单
		setlinecolor(RED);
		//空心矩形框
		rectangle(500, 115, 655, 165);
		Sleep(300);
		Menu().Display();
	}
	else if (win == 0 && ms.x >= 500 && ms.x <= 655 && ms.y >= 200 && ms.y <= 250)
	{
		//悔棋
		setlinecolor(RED);
		//空心矩形框
		rectangle(500, 200, 655, 250);
	}
}

void Play::displayWin(int n1,int n2)
{
	memset(a,0,sizeof(a));
	//显示哪一方赢了,n1为0表示双人为1表示人机，n2为0表示黑、人为1表示白、机
	IMAGE img;
	// 读取图片至绘图窗口
	if (n1 == 0 && n2 == 0)
		loadimage(&img, "blackWin.jpg",306,141);
	if (n1 == 0 && n2 == 1)
		loadimage(&img, "whiteWin.jpg", 306, 141);
	if (n1 == 1 && n2 == 0)
		loadimage(&img, "youWin.jpg", 306, 141);
	if (n1 == 1 && n2 == 1)
		loadimage(&img, "computerWin.jpg", 306, 141);
	putimage(100, 200, &img);

	MOUSEMSG m;//鼠标操作
	while (1)
	{
		m = GetMouseMsg();
		if (m.uMsg == WM_LBUTTONDOWN && m.x >= 215 && m.x <= 270 && m.y >= 285 && m.y <= 320)
		{
			setlinecolor(YELLOW);
			//空心矩形框
			rectangle(215, 285, 270, 320);
			Sleep(300);
			Menu().Display();
			break;
		}
		else if (m.uMsg == WM_LBUTTONDOWN)
			exit(0);
	}
}

void Play::TwoPlayerGame(MOUSEMSG m)
{
	int win = 0;
	int play1 = 1, play2 = 0;
	MOUSEMSG ms;
	////一直获取鼠标信息，判断操做
	while (win == 0)
	{
		//判断是否点击右侧工具栏或者棋盘
		ms = GetMouseMsg();
		if (ms.uMsg == WM_LBUTTONDOWN)
		{
			//判断是否点击右侧工具栏
			buttonRingth(m,ms,win);
			//判断是否点击棋盘
			for (int lie = 20; lie <= 490; lie += 30)
			{
				if (ms.x <= lie + 15 && ms.x >= lie - 15)
				{
					for (int hang = 20; hang <= 490; hang += 30)
					{
						if (ms.y <= hang + 15 && ms.y >= hang - 15)
						{
							if (play1 == 1 && a[hang / 30 - 1][lie / 30 - 1] == 0)
							{
								setfillcolor(BLACK);
								solidcircle(lie, hang, 12);
								a[hang / 30 - 1][lie / 30 - 1] = 1;
								play1 = 0;
								break;
							}
							if (play1 == 0 && a[hang / 30 - 1][lie / 30 - 1] == 0)
							{
								setfillcolor(WHITE);
								solidcircle(lie, hang, 12);
								a[hang / 30 - 1][lie / 30 - 1] = 2;
								play1 = 1;
								break;
							}
						}
					}
				}
			}
			//判断玩家是否赢
			win = Play().Win();
			if (win == 1)
			{
				//黑棋赢
				displayWin(0,0);
				break;
			}
			else if (win == 2)
			{
				//白棋赢
				displayWin(0,1);
				break;
			}
		}
	}
}

void Play::ComputerUserGame(MOUSEMSG m)
{
	int win = 0;
	int play1 = 1, play2 = 0;//play1表示玩家，play2表示电脑，每次玩家先落子

	MOUSEMSG ms;
	////一直获取鼠标信息，判断操做
	while (win == 0)
	{
		//判断是否点击右侧工具栏或者棋盘
		ms = GetMouseMsg();
		if (ms.uMsg == WM_LBUTTONDOWN)
		{
			//判断是否点击右侧工具栏
			buttonRingth(m, ms, win);
			//判断是否点击棋盘并且判断是否该玩家落子
			PlayGame(ms,&play1,&play2);
			//判断玩家是否赢
			win = Play().Win();
			if (win == 1)
			{
				//人赢
				displayWin(1, 0);
				break;
			}
			else if (win == 2)
			{
				//电脑赢
				displayWin(1, 1);
				break;
			}
		}
	}
}



int Play::Win()
{
	int win = 0;
	//判断是否赢
	for (int j = 0; j<16 && (win == 0); j++)
	{
		for (int i = 0; i<16; i++)
		{

			if ((a[j][i] == 1 && a[j][i + 1] == 1 && a[j][i + 2] == 1 && a[j][i + 3] == 1 && a[j][i + 4] == 1)
				|| (a[i][j] == 1 && a[i + 1][j] == 1 && a[i + 2][j] == 1 && a[i + 3][j] == 1 && a[i + 4][j] == 1))//横纵是5个子play1 win
			{
				win = 1;
				Sleep(100);
				break;
			}
			if ((a[j][i] == 2 && a[j][i + 1] == 2 && a[j][i + 2] == 2 && a[j][i + 3] == 2 && a[j][i + 4] == 2)
				|| (a[i][j] == 2 && a[i + 1][j] == 2 && a[i + 2][j] == 2 && a[i + 3][j] == 2 && a[i + 4][j] == 2))//横纵是5个子play2 win
			{
				win = 2;
				Sleep(100);
				break;
			}
		}
	}
	for (int j = 0; j<12 && (win == 0); j++)
	{
		for (int i = 0; i<12; i++)
		{
			if (a[j][i] == 1 && a[j + 1][i + 1] == 1 && a[j + 2][i + 2] == 1 && a[j + 3][i + 3] == 1 && a[j + 4][i + 4] == 1)//向右倾斜时候play1 win
			{
				win = 1;
				Sleep(100);
				break;

			}
			if (a[j][i] == 2 && a[j + 1][i + 1] == 2 && a[j + 2][i + 2] == 2 && a[j + 3][i + 3] == 2 && a[j + 4][i + 4] == 2)//向右倾斜时候play2 win
			{
				win = 2;
				Sleep(100);
				break;
			}
		}
		for (int i = 4; i<16 && (win == 0); i++)
		{
			if (a[j][i] == 1 && a[j + 1][i - 1] == 1 && a[j + 2][i - 2] == 1 && a[j + 3][i - 3] == 1 && a[j + 4][i - 4] == 1)//向左倾斜时候play1 win
			{
				win = 1;
				Sleep(100);
				break;
			}
			if (a[j][i] == 2 && a[j + 1][i - 1] == 2 && a[j + 2][i - 2] == 2 && a[j + 3][i - 3] == 2 && a[j + 4][i - 4] == 2)//向左倾斜时候play2 win
			{
				win = 2;
				Sleep(100);
				break;
			}
		}
	}
	return win;
}
